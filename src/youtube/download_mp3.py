# ---------------------------------------------
# Program by @developer_telegrams
#
#
# Version   Date        Info
# 1.0       2023    Initial Version
#
# ---------------------------------------------
import asyncio
import os

from pytube import YouTube
from moviepy.editor import *

from settings import dir_project, LOGO
from src.telegram.keyboard.keyboards import Admin_keyb
from src.telegram.sendler.sendler import Sendler_msg
from src.youtube.delete_file import delete_file


class DownloadMp3:
    @staticmethod
    async def wait_download(result_dict, message):

        id_user = message.chat.id

        while not result_dict['result']:
            await asyncio.sleep(3)

        if result_dict['result'] == 'error':

            if 'no attribute' in result_dict['error']:
                await Sendler_msg().new_sendler_message(message, f'–£ –≤–∏–¥–µ–æ {result_dict["link"]} –Ω–µ—Ç '
                                                                 f'{result_dict["filter"]}p.'
                                                                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', None)

            await Sendler_msg.sendler_admin_call(message, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ "{result_dict["link"]}" '
                                                          f'"{result_dict["error"]}"', None)

            try:
                await message.bot.delete_message(id_user, result_dict['one_msg_id'])
            except:
                pass

            return False

        video = open(result_dict['result'], 'rb')

        try:
            await message.bot.send_document(id_user, video)
        except Exception as es:

            delete_file(result_dict['result'])

            delete_file(result_dict['video'])

            if 'File too large for uploading. Check telegram api limit' in str(es):
                error = f'–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã telegram –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ' \
                        f'https://core.telegram.org/bots/api#senddocument'

                error_user = f'–§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä'

                print(error)

                try:
                    await message.bot.delete_message(id_user, result_dict['one_msg_id'])
                except:
                    pass

                await Sendler_msg().new_sendler_message(message, error_user, None)

                await Sendler_msg.sendler_admin_call(message, error, None)

                video.close()

                return False

            error = (f'–ù–µ –º–æ–≥—É –≤—ã—Å–ª–∞—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id_user} "{es}"')

            print(error)

            await Sendler_msg.sendler_admin_call(message, error, None)

            video.close()

            return False

        video.close()

        try:
            await message.bot.delete_message(id_user, result_dict['one_msg_id'])
        except:
            pass

        over_msg = f'–ù–∞–¥–µ—é—Å—å, —è —Å–º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å üëâüëà. –ß—Ç–æ-—Ç–æ –µ—â–µ?'

        keyb = Admin_keyb().start_keyb(id_user)

        await Sendler_msg().new_sendler_photo_message(message, LOGO, over_msg, keyb)

        delete_file(result_dict['result'])

        delete_file(result_dict['video'])

    @staticmethod
    def start_down(result_dict, test, _):
        asyncio.run(DownloadMp3.download_mp3(result_dict))

    @staticmethod
    async def download_mp3(result_dict):

        _filter = result_dict['filter']

        link = result_dict['link']

        _dir = os.path.join(dir_project, 'down')

        try:
            video = YouTube(link).streams.filter(res=f'{_filter}p').first().download(output_path=_dir)

            mp3_filename = video.split('.')[0]

            _mp3 = VideoFileClip(video)

            _mp3.audio.write_audiofile(os.path.join(_dir, f"{mp3_filename}.mp3"))

            _mp3.close()
        except Exception as es:

            result_dict['result'] = 'error'
            result_dict['error'] = str(es)

            return False

        result_dict['result'] = f'{mp3_filename}.mp3'

        result_dict['video'] = video

        return True
