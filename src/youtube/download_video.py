# ---------------------------------------------
# Program by @developer_telegrams
#
#
# Version   Date        Info
# 1.0       2023    Initial Version
#
# ---------------------------------------------
import asyncio
import os

from pytube import YouTube

from settings import dir_project, LOGO
from src.telegram.keyboard.keyboards import Admin_keyb
from src.telegram.sendler.sendler import Sendler_msg
from src.youtube.delete_file import delete_file


class DownloadVideo:
    @staticmethod
    async def wait_download(result_dict, call):
        while not result_dict['result']:
            await asyncio.sleep(3)

        if result_dict['result'] == 'error':

            if 'no attribute' in result_dict['error']:
                await Sendler_msg().new_sendler_message_call(call, f'–£ –≤–∏–¥–µ–æ {result_dict["link"]} –Ω–µ—Ç '
                                                                   f'{result_dict["filter"]}p.'
                                                                   f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', None)

            await Sendler_msg.sendler_admin_call(call, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ "{result_dict["link"]}" '
                                                       f'"{result_dict["error"]}"', None)

            return False

        id_user = call.message.chat.id

        video = open(result_dict['result'], 'rb')

        try:
            await call.bot.send_video(id_user, video)
        except Exception as es:

            delete_file(result_dict['result'])

            if 'File too large for uploading. Check telegram api limit' in str(es):
                error = f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {id_user} –æ—à–∏–±–∫–∞. –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã telegram –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ ' \
                        f'—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ' \
                        f'https://core.telegram.org/bots/api#senddocument'

                error_user = f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {id_user} –æ—à–∏–±–∫–∞. –§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä'

                print(error)

                await Sendler_msg().new_sendler_message_call(call, error_user, None)

                await Sendler_msg.sendler_admin_call(call, error, None)

                video.close()

                return False

            error = (f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {id_user} –æ—à–∏–±–∫–∞. –ù–µ –º–æ–≥—É –≤—ã—Å–ª–∞—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id_user} "{es}"')

            print(error)

            await Sendler_msg.sendler_admin_call(call, error, None)

            video.close()

            return False

        video.close()

        over_msg = f'–ù–∞–¥–µ—é—Å—å, —è —Å–º–æ–≥ –≤–∞–º –ø–æ–º–æ—á—å üëâüëà. –ß—Ç–æ-—Ç–æ –µ—â–µ?'

        keyb = Admin_keyb().start_keyb(id_user)

        await Sendler_msg().new_sendler_photo_call(call, LOGO, over_msg, keyb)

        delete_file(result_dict['result'])

    @staticmethod
    def start_down(call, _filter, link, result_dict):
        asyncio.run(DownloadVideo.download_video(call, _filter, link, result_dict))

    @staticmethod
    async def download_video(call, _filter, link, result_dict):

        _dir = os.path.join(dir_project, 'down')

        try:
            fn = YouTube(link).streams.filter(res=f'{_filter}p').first().download(output_path=_dir)
        except Exception as es:

            result_dict['result'] = 'error'
            result_dict['error'] = str(es)

            return False

        result_dict['result'] = fn

        return True
