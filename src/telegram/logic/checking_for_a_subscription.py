from aiogram.types import Message

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram import types

from src.telegram.keyboard.keyboards import Admin_keyb
from src.telegram.logic._start import _start
from src.telegram.sendler.sendler import Sendler_msg
from settings import LOGO

from src.telegram.bot_core import BotDB


class UserKeyb:

    def subscriber(self, sub_link_channel):
        self._start_key = InlineKeyboardMarkup(row_width=1)

        self._start_key.add(InlineKeyboardButton(text='üëâ–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data='link_sait',
                                                 url=sub_link_channel))
        self._start_key.add(InlineKeyboardButton(text=f'üåø –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='check_group'))

        return self._start_key


async def check_group(call: types.CallbackQuery):
    await Sendler_msg.log_client_call(call)

    subs = await checking_for_a_subscription(call.message)

    if not subs:
        return False

    id_user = call.message.chat.id

    keyb = Admin_keyb().start_keyb(id_user)

    await call.bot.delete_message(call.message.chat.id, call.message.message_id)

    await _start(call.message)


async def checking_for_a_subscription(message: Message):
    type_chat = message.chat.type

    if type_chat != 'private':
        return True

    user_id = message.chat.id

    sub_status = BotDB.get_subs_status()

    if int(sub_status) == 0:
        return True

    user_data = BotDB.get_user_data_from_id(user_id)

    if not user_data:
        return False

    count_down_user = user_data[7]

    sub_id_channel = BotDB.get_id_subs_channel()

    sub_link_channel = BotDB.get_link_subs_channel()

    sub_count_down = BotDB.get_count_subs_file_down()

    sub_count_down = int(sub_count_down)

    if count_down_user < sub_count_down:
        return True

    try:
        response = await message.bot.get_chat_member(sub_id_channel, user_id)
    except Exception as es:
        if 'Chat not found' in str(es):
            name_bot = await message.bot.get_me()

            name_user = f'@{message.chat.username}' if message.chat.username is not None else message.chat.first_name

            error = (
                f'‚ö†Ô∏è –ê–¥–º–∏–Ω–∫–∞: –ë–æ—Ç @{name_bot.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞ "{sub_id_channel}"'
                f' –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞. \n\n'
                f'–ü—Ä–æ–ø—É—Å–∫–∞—é {name_user} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏')

            print(error)

            await Sendler_msg.sendler_to_admin(message, error, None)

            return True

        print(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ "{es}"')
        return False

    if response['status'] == 'left':
        print(f'User: {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≥—Ä—É–ø–ø—É')

        text_admin = f'üôÇ {message.chat.full_name}, —á—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, ' \
                     f'–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n\n' \
                     f'–ñ–º–∏ —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—èüëá'

        keyb = UserKeyb().subscriber(sub_link_channel)

        await Sendler_msg.send_msg_message(message, text_admin, keyb)

        return False

    return True  # –ü–æ–¥–ø–∏—Å–∞–Ω
